#####Important Variables
$EPMDURL="https://dispatcher1.epm.cyberark.com"
$EPMLURL="https://login.epm.cyberark.com"
#$Username = ""          # Change me as needed
#$Password = ""          # Change me as needed
$Username = Read-Host -Prompt 'Username'
$inputpw = Read-Host -Prompt 'Password' -AsSecureString
$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($inputpw)
$Password = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
$APPID = "irrevelent"          # Required not used at this point in time
$LogonBody = @{Username = $Username; Password = $Password; ApplicationID = $APPID} | ConvertTo-JSON

# Function to parse the results of a failure after invoking the rest api
Function ParseErrorForResponseBody($Error) {
    if ($PSVersionTable.PSVersion.Major -lt 6) {
        if ($Error.Exception.Response) {  
            $Reader = New-Object System.IO.StreamReader($Error.Exception.Response.GetResponseStream())
            $Reader.BaseStream.Position = 0
            $Reader.DiscardBufferedData()
            $ResponseBody = $Reader.ReadToEnd()
            if ($ResponseBody.StartsWith('{')) {
                $ResponseBody = $ResponseBody | ConvertFrom-Json
            }
            return $ResponseBody
        }
    }
    else {
        return $Error.ErrorDetails.Message
    }
}

# Get the EPM Version info
# the docs say it's optional
# for some reason it's required
$EPMVERINFO = Invoke-RestMethod -Uri "$EPMDURL/EPM/API/Server/Version"
$EPMVER = $EPMVERINFO.Version

# Attempt to login
try {
	$EPMLogonResult = Invoke-RestMethod -Uri "$EPMDURL/EPM/API/$EPMVER/Auth/EPM/Logon" -Method Post -ContentType "application/json" -Body $LogonBody
	# Store the token returned
	if ($EPMLogonResult.IsPasswordExpired -eq $true) {
		Write-Host "$Username - Password is expired!" -ForegroundColor Red
		exit
	}

	# Build the header to get the sets for this user
    $FullToken = "basic " + $EPMLogonResult.EPMAuthenticationResult
    $EPMHeader = @{}
	$EPMHeader.Add("Authorization", $FullToken)

	# Get the sets this user has access to
	try {
		#
		#	There may be more than one set available to the user and there are more than one category of events
		#	See https://cyberarkdocu.azurewebsites.net/Product-Doc/OnlineHelp/EPM/Latest/en/Content/WebServices/GetSetsList.htm
		# 	for the list of event categories and how to bese determine how to find the proper set to retrieve the events for
		#
		$EPMSETS = Invoke-RestMethod -Method Get -Uri "$EPMLURL/EPM/API/$EPMVER/Sets" -Headers $EPMHeader
		#
		#	Pur your process here to select a specific Set ID, Event Category, and Query to look for events
		#

		# Get the Aggregated Events
		try {
			#
			#	See https://cyberarkdocu.azurewebsites.net/Product-Doc/OnlineHelp/EPM/Latest/en/Content/WebServices/GetAggregatedEvents.htm
			#	for more info on the Event Categories and how any events found will be returned
			#
			$EPMEvents = Invoke-RestMethod -Method Get -Uri "$EPMLURL/EPM/API/$EPMVER/Sets/<SETID>/Events/<EventCategory>/?<Query>" -Headers $EPMHeader
			#
			#	Pur your process here to select a specific File Qualifier and Query to look for events
			#

			# Get the Raw Events
			try {
				#
				#	See https://cyberarkdocu.azurewebsites.net/Product-Doc/OnlineHelp/EPM/Latest/en/Content/WebServices/GetRawEvents.htm
				#	for more information on where to get the parameters in <> and how how the output will be formatted
				#
				$EPMRawEvents = Invoke-RestMethod -Method Get -Uri "$EPMLURL/EPM/API/$EPMVER/Sets/<SETID>/Events/<EventCategory>/<FileQualifier>/?<Query>" -Headers $EPMHeader
				#
				#	Pur your process here to select a specific Event ID to look for event details
				#

				# Get raw event details
				try {
					#
					#	See https://cyberarkdocu.azurewebsites.net/Product-Doc/OnlineHelp/EPM/Latest/en/Content/WebServices/GetRawEventDetails.htm
					#	for more information on where to get the parameters in <> and how how the output will be formatted
					#
					$EPMRawEventDetails = Invoke-RestMethod -Method Get -Uri "$EPMLURL/EPM/API/$EPMVER/Sets/<SETID>/Events/<EventCategory>/Raw/<EventID>" -Headers $EPMHeader
				} catch {
					ParseErrorForResponseBody($_)
				}
			} catch {
				ParseErrorForResponseBody($_)
			}
		} catch {
			ParseErrorForResponseBody($_)
		}
	} catch {
		ParseErrorForResponseBody($_)
	}
} catch {
	ParseErrorForResponseBody($_)
}
